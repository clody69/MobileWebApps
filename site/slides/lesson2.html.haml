=title_slide_tag("Lecture 2: Building a Mobile Web App")


.background(data-background = "bg-lesson2")

%section.slide.section-title
  %h1 Lecture 2: Building a Mobile Web App
  .agenda
    %p Our first mobile web app
    %p New HTML5 form semantics
    %p Local storage
    %p Offline usage

%section.slide
  %header
    Our first mobile web app
  %article
    Our goal for today is:
    %ul
      %li Create a mobile ready web page
      %li Add a few entry forms
      %li Style the forms with CSS
      %li Implement the server
      %li Rewrite the app with jQuery Mobile
      %li Add local storage
      %li Make the app available offline

%section.slide
  %header
    Viewport Meta Tag
  %article
    .row
      .twoColumn
        .autoimage.bordered
          =image_tag('lesson2/firstapp-no-viewport.png')
      .twoColumn
        .autoimage.bordered
          =image_tag('lesson2/firstapp-viewport.png')
    .row
      :coderay
        #!html
        <meta name="viewport" content="width=device-width; user-scalable=0;" />        

%section.slide
  %header
    Viewport Meta Tag
  %article
    %ul
      %li Introduced by Apple with the iPhone for mobile browsing
      %li Specify exactly the dimension of the page to render
      %li Not part of HTML5 but will be incorporated in the future
      %li 
        More info at 
        %a(href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html") Safari Development
        website.
    :coderay
      #!html
      <meta name="viewport" content="width=device-width, user-scalable=0, initial-scale=1.0, maximum-scale=1.0;" />        

%section.slide
  %header 
    Hiding the URL bar
  %article
    .row
      .twoColumn
        .autobox 
          %p On some browser the URL bar is always visible
          %p UI frameworks (like jQuery and Sencha) automatically hide the bar using the following tricks
          .vmargin
            Scroll to the top of the page after the browser has finished to load the page
            :coderay
              #!html
              <body onload="window.scrollTo(0, 1);">  
      
          .vmargin
            On iOS there are specific tags:
            :coderay
              #!html
              <meta name="apple-mobile-web-app-capable" content="yes" />
              <meta name="apple-mobile-web-app-status-bar-style" content="black" />
      .twoColumn
        .autoimage.bordered
          =image_tag('lesson2/firstapp-jquery.png')

%section.slide
  %header
    Basic Form for Posting to a Blog
  %article.justified
    .hmargin.smaller  
      :coderay
        #!haml
        !!! 5
        %html
          %head
            %meta(charset="utf-8")
            %meta(content="IE=edge,chrome=1" http-equiv="X-UA-Compatible")
            %meta(name="viewport" content="width=device-width, initial-scale=1")
            %title
              Form Blog
          %body
            %h1 Post a blog entry
            %form
              %ul
                %li
                  %input(type = "text" name="title" id="title" placeholder="Post Title")
                %li
                  %textarea(name="content" rows = "5" placeholder = "Content")
                %li
                  %input(type = "email" placeholder = "Email")              
                %li
                  %input(type = "submit" name = "Post")
    .hmargin.bordered
      =image_tag('lesson2/blog-1.png')
%section.slide
  %header
    Adding Some Style
  %article.justified  
    .hmargin.smaller
      :coderay
        #!css
        body {font-family: Arial; margin: 0px;}
        h1 {
         background: -webkit-gradient(linear, left top, left bottom, color-stop(0.0, #666), 
            color-stop(1.0, #000));
          -webkit-box-shadow: 0 0 4px #333;
          color: #EEE; 
          margin: 0 0 4px 0; padding: 4px; width: 100%;
          text-align: center;
        }
        form ul { padding: 6px; margin: 0px; list-style-type: none; }
        form ul li {
          margin: 0 0 4px 0; -webkit-border-radius: 4px;
          border: 1px solid #666; padding: 4px;
        }
        input, textarea {
          -webkit-appearance: none;
          border: 0; width: 95%;
        }
        form ul li.noborder { border: 0; padding: 0px;}
        input[type=submit] {
          border: 0;
          background: -webkit-gradient(linear, left top, left bottom, color-stop(0.0, #EEE),
            color-stop(1.0, #AAA));
          -webkit-border-radius: 6px;
          -webkit-box-shadow: 0 0 4px #333;
          width: 100%; padding: 6px;
        } 
    .hmargin.bordered
      =image_tag('lesson2/blog-2.png')

%section.slide
  %header
    Basic Design
  %article
    =image_tag('lesson2/blog-diagram1.png', :resize => true)

%section.slide
  %header 
    A Simple Server with Sinatra
    %span.smaller
      =example_url_tag("htmlFormBlog")

  %article.larger
    :coderay
      #!ruby
      require 'sinatra'
      require 'json'

      $articles = []

      def timestamp
        Time.now.strftime("%H:%M:%S")
      end

      get '/' do 
        File.read('index.html')
      end

      get '/articles' do
        content_type :json
        {:articles => $articles}.to_json
      end

      post '/articles' do
        article = params.merge( {'timestamp' => timestamp}).to_json
        puts article
        $articles << article
      end
      
%section.slide
  %header jQuery Family
  %article
    %a(href="http://jquery.com") jQuery Library 
    %ul
      %li Library for manipulating, traversing the DOM and animations.
      %li 
        Check also 
        %a(href="http://zeptojs.com/") Zepto.js
      
    %a(href="http://jqueryui.com") jQuery UI
    %ul
      %li Customizable UI library for websites
  
    %a(href="http://jquerymobile.com/") jQuery Mobile
    %ul
      %li HTML5-based user interface for mobile devices
      %li Lightweight, flexible and themeable design.
      %li 3-level graded platform support system
      %li 
        Check out the 
        %a(href="http://www.jqmgallery.com/") gallery
      
%section.slide
  %header 
    =html5_semantics_tag("Custom Data Attributes")
    %span.smaller
      %a(href="http://www.whatwg.org/specs/web-apps/current-work/#embedding-custom-non-visible-data-with-the-data-*-attributes") more info
  %article
    %p Custom data attributes allows us to embed data with the page
    %p 
      Any element attribute that start with 
      %strong.red data- 
      is treated as a storage area for private data
    %p Custom data attributes do not affect the rendering
    :coderay
      #!html
      <div class="title" data-name="Hello" data-lang="en" data-city="Helsinki">
        Hello World
      </div>

%section.slide
  %header
    Key elements of jQuery Mobile
  %article
    %p 
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/pages/page-template.html") Single page template
      and
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/pages/multipage-template.html") Multi-page template
    %p
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/pages/page-transitions.html") Page transitions
    
    %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/pages/page-navmodel.html") Ajax Navigation
    %ul
      %li First page is requested via HTTP request
      %li Subsequent pages are loaded via Ajax and injected into the DOM (only the "page" section)
    %p 
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/forms/forms-all.html") Enhanced form elements
    %p
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/lists/lists-thumbnails.html") Several list views
    %p
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/api/events.html") Events
      and
      %a(href="http://jquerymobile.com/demos/1.1.0-rc.1/docs/api/data-attributes.html") Data attributes

%section.slide
  %header 
    A New Design with jQuery mobile
    %span.smaller
      =example_url_tag("htmljQueryBlog")
  %article
    .row
      .twoColumn
        .hmargin.bordered
          =image_tag('lesson2/blog-jquery.png')
      .twoColumn
        .hmargin.bordered
          =image_tag('lesson2/blog-jquery-new.png')

        
%section.slide
  %header
    jQuery Mobile Page
  %article
    =image_tag('lesson2/jqm-page.png', :resize => true)


%section.slide
  %header
    Design with Templates
  %article
    =image_tag('lesson2/blog-diagram2.png', :resize => true)


%section.slide
  %header 
    Sinatra Server with Templates
    %span.smaller=example_url_tag("htmljQueryBlog")
  %article.smaller
    :coderay
      #!ruby
      require 'sinatra'
      require 'json'
      require 'haml'
      
      $articles = [{:title => "Welcome", :content => "My first post", :email => "hello@blog.com", :timestamp => "1.1.2012 10:20:30"}]
      
      def timestamp
        Time.now.strftime("%d.%m.%Y %H:%M:%S")
      end
      
      get '/' do 
        #Renders the haml template index.html.haml
        #with the default layout layout.html.haml
        haml :index, :layout => :layout
      end
      
      get '/new' do 
        haml :new
      end
      
      post '/new' do
        #Symbolize the params keys
        article = params.inject({}) { |h,(k,v)| h[k.to_sym] = v; h }
        
        article[:timestamp] = timestamp
        $articles << article
      
        puts article
        redirect to ("/")
      end

%section.slide
  %header 
    The Layout
    %span.small
      (
      %span.terminal
        'views/layout.haml'
      )
  %article.small
    :coderay
      #!haml
      !!! 5
      %html
        %head
          %meta(charset="utf-8")
          %meta(content="IE=edge,chrome=1" http-equiv="X-UA-Compatible")
          %meta(name="viewport" content="width=device-width, initial-scale=1")
          %link(rel="stylesheet" href="http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.css")
          %script(type="text/javascript" src="http://code.jquery.com/jquery-1.8.2.min.js")
          %script(type="text/javascript" src="http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.js")
          %title
            Form Blog
        %body
          %div(data-role="page" id="home")
            %div(data-role="header")
              %h1 Our First Blog
      
            %div(data-role="content")
              = yield
              
            %div(data-role="footer" data-position="fixed")
              %div(data-role="navbar")
                %ul
                  %li
                    %a(href="/" data-ajax="false") Posts
                  %li
                    %a(href="/new" data-ajax="false") New Entry      
      
%section.slide
  %header 
    The Views
    %span.smaller=example_url_tag("htmljQueryBlog")

  %article
    .autobox
      List of posts (
      %span.terminal
        'views/index.haml'
      )
      :coderay
        #!haml
        %ul(data-role = "listview")
          - $articles.each do |a|
            %li
              %p.ui-li-aside
                =a[:timestamp]
              %h3 
                =a[:title]
              %p
                %strong
                  =a[:email]
              %p
                =a[:content]
    .autobox.vmargin
      New Post Form (
      %span.terminal
        'views/new.haml'
      )
      :coderay
        #!haml
        %form(action="/new" method="post")
          %input(type = "text" name="title" id="title" placeholder="Post Title")
          %textarea(name="content" rows = "5" placeholder = "Content")
          %input(type = "email" name="email" placeholder = "Email")              
          %button#postEntry(type = "submit") Posts

%section.slide
  %header
    =html5_styling_tag("Form Validation")
  %article
    CSS3 introduces two new pseudo-classes for input elements:
    %ul
      %li
        %strong.red :valid
        \: element is valid according to the input's type setting (e.g. email)
      %li 
        %strong.red :invalid
        \: element failed to validate according to the input's type
    %p 
      HTML5 also introduced the 
      %strong.red required
      attribute that indicate the field must have valid data before it can be submmitted. 
    
    %p Styling for invalid elements is done with CSS:
    .row
      .twoColumn
        :coderay
          #!css
          :invalid {  
            background-color: #ffdddd;  
          }  
      .twoColumn
        :coderay
          #!javascript
          $(":invalid").addClass('red');

          
%section.slide 
  %header 
    Validation
    %span.smaller
      =example_url_tag("htmljQueryValBlog")
  %article
    .row
      .twoColumn
        .autobox
          CSS
          :coderay
            #!css
            [required] {
              border-color: #88a;
              -webkit-box-shadow: 0 0 3px rgba(0, 0, 255, .5);
            }
            :invalid {
              border-color: #e88;
              -webkit-box-shadow: 0 0 5px rgba(255, 0, 0, .8);
            }
            input.invalid {
              background: url(error.png) no-repeat 4px 6px;
              padding-left: 30px;
            }
      .twoColumn
        .autobox
          JS
          :coderay
            #!javascript
            $(function() {
              $("#postEntry").bind("click", function() {
                $(".invalid").removeClass("invalid")
                if ($(":invalid").length) {
                  $(":invalid").addClass("invalid");
                  return false;
                }
              })      
            })
    .row
      .vmargin
        Form
        :coderay
          #!haml
          %form(action="/new" method="post")
          %input(type = "text" name="title" id="title" placeholder="Post Title" required)
          %textarea(name="content" rows = "5" placeholder = "Content")
          %input(type = "email" name="email" placeholder = "Email")              
          %button#postEntry(type = "submit") Post

%section.slide
  %header 
    =html5_semantics_tag("New Form Input Types")
  %article
    .row
      .twoColumn
        .bordered
          =image_tag('lesson2/textinputs-jquery.png')
      .twoColumn
        .autobox
          %p
            Overview at 
            %a(href="http://slides.html5rocks.com/#new-form-types") HTML5 Rocks
          %p 
            More details at 
            %a(href="http://www.w3schools.com/html5/html5_form_input_types.asp") W3Schools
          %p
            Mobile version from 
            %a(href="http://jquerymobile.com/demos/1.0/docs/forms/forms-all.html") jQuery Mobile

%section.slide
  %header Contenteditable Attribute
  %article
    %p The contenteditable attribute specifies whether a user can edit the content of an element.
    
    %p(contenteditable='true')
      This paragraph is editable. 
    .vmargin
      :coderay
        #!html
        <p contenteditable='true'>This paragraph is editable</p>
    %p 
      Supported in iOS 5 and Android Browser 3.0 (
      %a(href="http://caniuse.com/#search=contenteditable") CanIuse
      )   

%section.slide
  %header 
    Editable Blog
    %span.smaller
      =example_url_tag("htmljQueryValEditBlog")
  %article
    .autobox
      List of posts (
      %span.terminal
        'views/index.haml'
      )
      :coderay
        #!haml
        %ul(data-role = "listview")
          - $articles.each_with_index do |a, i|
            %li
              %p.ui-li-aside
                =a[:timestamp]
              %h3(contenteditable="true" data-name="title" data-id='\#{i}') 
                =a[:title]
              %p
                %strong
                  =a[:email]
              %p(contenteditable="true" data-name="content" data-id='\#{i}')
                =a[:content]

%section.slide
  %header
    Design supporting updates
  %article
    =image_tag('lesson2/blog-diagram3.png', :resize => true)


%section.slide
  %header 
    Editable Blog
    %span.smaller
      =example_url_tag("htmljQueryValEditBlog")
      
  %article
    .row.small
      .twoColumn
        .autobox
          javascript code
          :coderay
            #!javascript
            $("[contenteditable]").focus(function() {
              var $this = $(this);
              $this.data('before', $this.html());
              return $this;          
            });
            $("[contenteditable]").live('blur', function() {
                var $this = $(this);
                if ($this.data('before') !== $this.html()) {
                    $this.data('before', $this.html());
                    $this.trigger('change');

                    var msg = {};
                    msg['id'] = $this.attr('data-id');
                    msg[$this.attr('data-name')] = $this.html();
                    $.post('/update', msg);
                }
                return $this;
            });        
      .twoColumn 
        .autobox  
          server.rb
          :coderay
            #!ruby
            post '/update' do
              #Symbolize the params keys
              article = params.inject({}) {|h,(k,v)| h[k.to_sym] = v; h}
            
              #Update the timestamp
              article[:timestamp] = timestamp
              
              #Replace the entry in the list of articles
              $articles[article[:id].to_i].merge!(article)
            
              puts $articles
            end

%section.slide
  %header Create a multipage app with jQuery
  %article.singlespace
    %ul
      %li One single HTML document can contain multiple pages
      %li Each page must have a unique ID
      %li The framework handles the page switching and updating the url hash
      %li
        Link behaviour:
        %ul
          %li If it's an internal page, there is a transition to that page
          %li 
            If it's an external page, the default behaviour is to trigger an ajax request to load the page. 
            Only the content of the 
            %span.terminal
              body
            (of of the 
            %span.terminal
              body-role="page"
            if present) is injected into the DOM
          %li 
            If the attributes 
            %span.terminal
              rel="external"
            or 
            %span.terminal
              data-ajax = "false"
            are present, the link triggers a full page reload.
            links with external attribute will cause a full page refresh
%section.slide
  %header
    Design with multiple JQM pages
  %article
    =image_tag('lesson2/blog-diagram4.png', :resize => true)

%section.slide
  %header 
    A multipage Blog 
    %span.smaller
      =example_url_tag("htmljQueryMultiBlog")    
  %article.smaller
    .row
      .twoColumn
        .autobox.hmargin
          layout.haml
          :coderay
            #!haml
            %body
              = yield
        
          index.haml
          :coderay
            #!haml
            %div(data-role="page" id="home")
              = haml :header
                           
              %div(data-role="content")
                = haml :posts
              
              = haml :footer
                  
            %div(data-role="page" id="new")
              = haml :header
              
              %div(data-role="content")
                = haml :new
              
              =haml :footer      
          new.haml
          :coderay
            #!haml
            %form(action="/new" method="post")
              %input(type = "text" name="title" id="title" placeholder="Post Title" required)
              %textarea(name="content" rows = "5" placeholder = "Content")
              %input(type = "email" name="email" placeholder = "Email")              
              %button#postEntry(type = "submit") Post

      .twoColumn
        .autobox
          header.haml
          :coderay
            #!haml
            %div(data-role="header")
              %h1 Our First Blog

          footer.haml
          :coderay
            #!haml
            %div(data-role="footer" data-position="fixed")
              %div(data-role="navbar")
                %ul
                  %li
                    %a(href="/" data-ajax="false") Posts
                  %li
                    %a(href="#new" data-transition="flip") New Entry

          posts.haml
          :coderay
            #!haml
            %ul(data-role = "listview")
              - $articles.each_with_index do |a, i|
                %li
                  %p.ui-li-aside
                    =a[:timestamp]
                  %h3(contenteditable="true" data-name="title" data-id='\#{i}') 
                    =a[:title]
                  %p
                    %strong
                      =a[:email]
                  %p(contenteditable="true" data-name="content" data-id='\#{i}')
                    =a[:content]

          
          
%section.slide
  %header Offline Usage
  %article
    For a web application to work offline, you need to consider the following:
    %ul
      %li 
        Store required data locally through 
        %strong localStorage
      %li 
        Define what files to cache locally via a 
        %strong manifest file
      %li 
        Manage connection changes with 
        %strong online and offline events
      %li 
        Define a 
        %strong synchronization 
        strategy with the data stored in the cloud

%section.slide
  %header
    =html5_offline_storage_tag("Offline Storage")   
  %article
    %ul
      %li Historically browsers (thin clients) do not support a way to store data.
     
      %li 
        Cookies allow to attach data to the HTTP requests but:
        %ul
          %li Cookies are sent back and forth with every request
          %li Cookies cannot be share across different subdomains
          %li Limited storage (20 cookies x 4KB)
      %li 
        Local storage in the browser gives the advantage of:
        %ul
          %li Reduce number of requests to the server
          %li Store locally static or semi static data
          %li Enable offline usage (e.g. for mobile devices)

%section.slide
  %header
    =html5_offline_storage_tag("Offline Storage")   
  %article
    HTML5 introduces two key-value storing mechanisms:
    %ul
      %li
        %strong> localStorage
        \: persistent storage across browser restarts
      %li
        %strong> sessionStorage
        \: storage that resets when a browser session restarts
    :coderay
      #!javascript
      //set a key
      localStorage.myData = "Hello World";
      localStorage.setItem('myData', "Hello World");
      
      //get a key
      var data;
      data = localStorage.myData;
      data = localStorage.getItem('myData');
      
      //delete a key
      localStorage.myData = undefined;
      localStorage.removeItem('myData');

%section.slide
  %header
    =html5_offline_storage_tag("Offline Storage - Benefits")   
  %article
    %ul
      %li Same origin policy
      %li 
        approx 2-5MB of storage per host (
        %a(href="http://dev-test.nemikor.com/web-storage/support-test/") test
        )
      %li Only strings can be stored (UTF-16)
      %li Covert to JSON before storing
      %li Browser provide tools for looking at the local storage
      %li 
        Performance ( 
        %a(href="http://www.webdirections.org/blog/localstorage-perhaps-not-so-harmful/") Check this
        ) is better than cookies but not the fastest (depends on browser impementation)


%section.slide
  %header
    Add Options to the Blog
  %article
    .row
      .twoColumn
        .autobox
          %p 
            Add Options for storing:
            %ul
              %li Name
              %li E-mail
          %p The personal data is stored in the localStorage
          %p When posting a new entry the name and email are also included.
          
      .twoColumn
        .hmargin.bordered
          =image_tag('lesson2/blog-jquery-options.png')

%section.slide
  %header
    Design with localStorage
  %article
    =image_tag('lesson2/blog-diagram5.png', :resize => true)

    
%section.slide
  %header
    Add Options to the Blog
    %span.smaller
      =example_url_tag("htmljQueryStorageBlog")    
  %article.smaller
    .autobox.hmargin
      index.haml
      :coderay
        #!haml
        ...
        %div(data-role="page" id="options")
        
          =haml :options
        
          =haml :footer
  
      options.haml
      :coderay
        #!haml
        %div(data-role = "header" data-position="inline")
          %a(href = "#home" data-icon="delete" data-rel="back") Cancel
          %h1 Options
          %a(href = "#home" data-icon="check" data-theme="b" id="saveOpt" data-rel="back") Save
          
        %div(data-role="content")
          %form
            %input(type = "text" name="name" id="optName" placeholder="Name")
            %input(type = "email" name="email" id="optEmail" placeholder = "Email")   
  
      new.haml
      :coderay
        #!haml
        %form
          %input(type = "text" name="title" id="title" placeholder="Post Title" required)
          %textarea(name="content" rows = "5" placeholder = "Content" id="content")
          %button#postEntry(type = "submit") Post        

%section.slide
  %header
    Add Options to the Blog
    %span.smaller
      =example_url_tag("htmljQueryStorageBlog")    
  %article.smaller
    .autobox.hmargin
      JS
      :coderay
        #!javascript
        $(function() {
          // Assign the options from the local storage
          $("#optName").val(localStorage.name);
          $("#optEmail").val(localStorage.email);
            
          $("#postEntry").bind("click", function() {
            e.preventDefault();
            $("#new .invalid").removeClass("invalid")
            if ($("#new :invalid").length) { $("#new :invalid").addClass("invalid"); return false; }
            var msg = {};
            msg['title'] = $('#title').val();
            msg['content'] = $('#content').val();
            msg['email'] = localStorage.email;
            msg['name'] = localStorage.name;
            $.post('/new', msg, function() { $.mobile.changePage("/", {reloadPage: true}); });
          });

          ...          
          //Save the options in the local storage     
          $("#saveOpt").bind("click", function() {
            $("#options .invalid").removeClass("invalid")
            if ($("#options :invalid").length) {
              $("#options :invalid").addClass("invalid");
              return false;
            }
            localStorage.name = $("#optName").val();
            localStorage.email = $("#optEmail").val();        
          })          
        })

%section.slide
  %header
    =html5_offline_storage_tag("Manifest File")   
  %article
    %ul
      %li The manifest file tells the browser what files to cache locally for offline usage (HTML, CSS, Javascript, images, video, etc.)
      %li Every single resource that you want to cache must be explicitly listed (no wildcards).
      %li The files listed in the manifest will be loaded from the local disk even if the browser is online.
      %li If the page is loaded from the application cache (either online or offline), the browser will load the assets ONLY from the cache and ignore external resources (unless they are specified in the NETWORK section)
    
%section.slide
  %header
    =html5_offline_storage_tag("Cache size")   
  %article
    %ul
      %li Safari desktop browser (Mac and Windows) have no limit
      %li Mobile Safari had 10MB limit and with iOS6 it has been increased to 25MB 
      %li Chrome has a 5MB limit
      %li Android browser has no limit
      %li Firefox desktop has no limit
      %li Opera’s cache limit can be managed by the user, but has a default size of 50MB
      
%section.slide
  %header
    =html5_offline_storage_tag("Manifest File")   
    %span.smaller
      =example_url_tag("htmljQueryOfflineBlog")   
  %article
    .row
      .twoColumn
        .autobox
          :coderay
            #!html
            <!DOCTYPE HTML>
            <html manifest="/manifest.appcache">
            <body>
            ...
            </body> </html>
          
          :coderay
            #!plain
            CACHE MANIFEST
            # 30 January 2012
            /index.html
            /jquery.js
            /main.css
            /logo.png 
  
            NETWORK:
            /api
            
            FALLBACK:
            /about /offline-about.html
          :coderay
            #!plain
            mime type: text/cache-manifest
      .twoColumn
        %ul
          %li 
            Recommended file extension is
            %span.terminal>
              \.appcache
          %li Only HTTP GET requests are cached.
          %li The NETWORK section contains resources that are always fetched from the network
          %li The FALLBACK section contains resources that are fetched from the network only if the browser is online. Otherwiser the fallback version is used.
%section.slide
  %header
    =html5_offline_storage_tag("Manifest File - Rules")   
  %article
    %ul
      %li 
        When a page is loaded the browser will check the manifest on the server. 
        If it has changed, the browser will redownload all the files listed in the manifest, update the cache and fire the event 
        %span.terminal>
          applicationCache.onUpdateReady
      %li The browser retains the cached assets until either the user clears the cache or you trigger an update. 
      %li Triggering an update requires that the content of the manifest file changes (not just the assets).
      %li Any document referencing the manifest file is cached
      
    %p 
      Good explanation is available  
      %a(href="http://html5doctor.com/go-offline-with-application-cache/") here

%section.slide
  %header
    =html5_offline_storage_tag("Manifest File - Network Whitelisting")   
  %article
    .row
      .twoColumn
        .autobox
          %ul
            %li Once the manifest file is in place, the browser will route all the requests throught that file (both online or offline).
            %li If there is no rule in the manifest file that his matching a request, the request will fail.
            %li In the NETWORK section, the rule '*' whitelist all the requests that are not matching the rules in the CACHE section
      .twoColumn
        :coderay
          #!plain
          CACHE MANIFEST
          # 30 January 2012
          /index.html
          /jquery.js
          /main.css
          /logo.png 
    
          NETWORK:
          /api
          *
          
          FALLBACK:
          /about /offline-about.html
              
%section.slide
  %header
    Making life easier with Manifesto
    %span.smaller
      =example_url_tag("htmljQueryOfflineManifestoBlog")   
  %article
    .row
      .twoColumn
        .autobox
          %ul
            %li 
              %a(href="https://github.com/johntopley/manifesto#readme") Manifesto 
              automatically generate the manifest file by listing all files in the specified directories and subdirectories
            %li 
              By default it includes 
              %span.terminal
                \/public
            %li It also computes a hash of the files's contents, so that if a file is changed the manifest file is automatically invalidated.
      .twoColumn
        .autobox
          :coderay
            #!ruby
            get '/manifest.appcache' do
              headers 'Content-Type' => 'text/cache-manifest' 
              Manifesto.cache
            end
            
          :coderay
            #!plain
            CACHE MANIFEST
            # Generated by manifesto (http://github.com/johntopley/manifesto)
            # Hash: 48c5fbdc2a7627233a5f9741fec32a77
            /jquery.mobile.structure-1.0.1.min.css
            /jquery.mobile.structure-1.0.1.css
            /jquery.mobile-1.0.1.min.js
            /jquery.mobile-1.0.1.min.css
            /jquery.mobile-1.0.1.js
            /jquery.mobile-1.0.1.css
            /jquery-1.7.1.min.js
            /images/icons-36-white.png
            /images/icons-36-black.png
            /images/icons-18-white.png
            /images/icons-18-black.png
            /images/ajax-loader.png
            /error.png            

%section.slide
  %header How to refresh the list of posts
  %article
    %ul
      %li The main HTML page of the web app is also cached (because it is referencing the manifest file)
      %li The page will be refreshed only when the manifest file expires in the cache of the browser and is changed on the server.
    %br 
    %p => Dynamic updates require a new design for our blog

%section.slide
  %header The applicationCache interface
  %article
    .autobox
      :coderay
        #!javascript
        window.applicationCache  //Main object to access the app cache
        window.applicationCache.status //Status
        window.applicationCache.onupdateready = function (e) {...};  //Callback        
        window.applicationCache.update();  //Force cache update
        window.applicationCache.swapCache();  //Swap to new cache
    .row
      .twoColumn
        .autobox
          State of the cache:
          %ul.smaller
            %li 0: UNCACHED
            %li 1: IDLE
            %li 2: CHECKING
            %li 3: DOWNLOADING
            %li 4: UPDATEREADY
            %li 5: OBSOLETE
      .twoColumn
        .autobox
          Event callbakcs:
          %ul.smaller
            %li onchecking
            %li ondownloading
            %li onupdateready
            %li onobsolete
            %li oncached
            %li onerror
            %li onnoupdateready
            %li onprogress
                       
%section.slide
  %header
    Browser connectivity
  %article
    Mobile apps must detect if the browser is online or offline to provide the best user experience:
    %ul 
      %li disabling those parts of the UI that can only work online
      %li caching offline actions
      %li synchronizing the offline changes with the server

%section.slide
  %header
    Detecting connectivity with the manifest 
    %span.smaller
      =example_url_tag("htmljQueryOfflineDetectBlog")   
  %article
    layout.haml
    :coderay
      #!javascript
      $(function() {
        function testOnline() {
          $.getJSON('ping', function(data) {
            $('.status').html(data);  
          });
        }
      //Test at first page load
      testOnline();
      //Test a timer for infinite testing
      window.setInterval(testOnline, 10000);
    header.haml
    :coderay
      #!haml
      %div(data-role="header")
        %h1.status 
        %a(href="#options" data-icon="gear" class="ui-btn-right" data-transition="slidedown") Options

%section.slide
  %header
    Detecting connectivity with the manifest 
    %span.smaller
      =example_url_tag("htmljQueryOfflineDetectBlog")   
  %article

    manifest.appcache
    :coderay
      #!plain
      ...
      FALLBACK:
      /ping /ping-offline.json  
  
    ping-offline.json
    :coderay
      #!javascript
      "Offline"
  
    server.rb
    :coderay
      #!ruby
      get '/manifest.appcache' do
        headers 'Content-Type' => 'text/cache-manifest' # Must be served with this MIME type
        cache_control :no_cache #Disable caching of manifest file, only for demo purposes
        Manifesto.cache << "FALLBACK:\n /ping /ping-offline.json\n"
      end
      get '/ping' do
        content_type :json
        "Online".to_json
      end

%section.slide
  %header
    =html5_offline_storage_tag("IndexedDB")
  %article
    %p Storage mechanism for unstructured data objects (NoSQL)
    %p Key-value storage where values can be complex structure objects.
    %p Good performance (better than localStorage)
    %p Asynchronous API (not blocking UI thread) and synchronous for web workers
    %p Based on a transactional model
    %p Support for data migrations
    
