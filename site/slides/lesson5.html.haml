=title_slide_tag("Lecture 5: CSS3 & Responsive Design")

.background(data-background = "bg-lesson5-dali-time")

%section.slide.section-title
  %h1 Lecture 5: CSS3 & Responsive Design 
  .agenda
    %p Progressive Enhancement & Responsive Design
    %p Media Queries
    %p Position: fixed & Overflow: scroll
    %p Touch Interaction
    %p CSS3


%section.slide
  %header
    Desktop First
  %article
    Historically the workflow for web design started with desktop first
    %ul
      %li Tools like Photoshop, Fireworks, Dreamweaver
      %li Printed-page metaphor. 
      %li 
        Optimized for a specific width: 
        %a(href="http://960.gs/") 960px
      %li Optimized for a specific browser(s)
      %li Optimized for one input method: mouse
      %li Aim at identical experiences cross-browser and cross-platform
    
%section.slide
  %header
    Then Mobile Came
  %article
    %p.slide 
      %strong 1.2 billion Mobile Web Users (2011)
    %p.slide 
      20-25% Web users are only mobile (
      %a(href="http://gs.statcounter.com/?PHPSESSID=72j5itboe5rsca04fahrqqegd6#mobile_vs_desktop-ww-monthly-201208-201210-map") mobile vs desktop
      ) 
    %p.slide How to adapt desktop web sites to mobile
    %ul
      %li.slide Do nothing => awful experience
      %li.slide 
        Separated Mobile Experience 
        %ul
          %li 4 different sites (desktop, tablet, touch, non-touch)
          %li Mobile users are often penalized (content, interaction and performance)
%section.slide
  %header
    Device Categories and UX Factors
  %article
    %strong Devices
    %ul
      %li Desktop/laptops
      %li Tablets 
      %li Smart phones
      %li Feature phones 
    %strong Main factors affect UX
    %ul
      %li Screen resolution (size, orientation, dpi)
      %li User interaction (mouse, keyboard, touch, voice)
      %li Performance (CPU power, memory capacity, GPU, network)
      %li Default browser
      
%section.slide
  %header
    Desktop/Laptop
  %article
    .row
      .twoColumn
        =image_tag "lesson5/laptop.jpg", :resize => true
      .twoColumn
        %ul
          %li Large screen
          %li High performance
          %li High bandwidth
          %li Multiple browsers with different capabilities
          %li Mouse and keyboard interaction (but not always)

%section.slide
  %header
    Tablet
  %article
    .row
      .twoColumn
        =image_tag "lesson5/touch.jpg", :resize => true
      .twoColumn
        %ul
          %li Large screen
          %li Close to smartphones for user interaction
          %li Two orientations
          %li Smooth animations and graphics (often equipped with powerful GPU)
          %li High to medium performance 
          %li High to medium bandwidth
          %li Primarily used with the default browser (but not always)
          %li Touch interaction (but not always)

%section.slide
  %header
    Smartphones
  %article
    .row
      .twoColumn
        =image_tag "lesson5/galaxy_s3.jpg", :resize => true
      .twoColumn
        %ul
          %li Small screen but high-definition
          %li Handheld device
          %li Used while on the move
          %li Two orientations
          %li Smooth animations and graphics (often equipped with powerful GPU)
          %li Medium performance 
          %li 3G/Wifi/EDGE/LTE network
          %li Primarily used with the default browser (but not always)
          %li Touch interaction

%section.slide
  %header
    Feature phones
  %article
    .row
      .twoColumn
        =image_tag "lesson5/operamini.png", :resize => true
      .twoColumn
        %ul
          %li Small screen
          %li One or two orientations
          %li Limited animations and graphics
          %li Medium-low performance 
          %li 2G/3G bandwidth
          %li Limited native and proxy browsing
          %li Touch interaction (but not always)
          %li Multi-tasking users on the move that require fast and responsive UI
          %li Task oriented UI 
          %li Online/offline experience      
%section.slide
  %header
    Design for Mobile First
  %article
    .row.slide
      .twoColumn
        =image_tag "lesson5/mobilefirst-gd.jpg", :resize => true
      .twoColumn
        .autobox
          %p 
            %strong Graceful Degradation
          .small
            %p Design for desktop on as many browsers and platforms as possible
            %p 
              Account for possible 
              %em degradation
              and ensure functionality (e.g. remove content)
          
    .row.slide
      .twoColumn
        =image_tag "lesson5/mobilefirst-pe.jpg", :resize => true
      .twoColumn
        .autobox
          %p 
            %strong Progressive Enhancement
          .small
            %p First create a baseline experience that focuses on semantic markup, structure and content
            %p Second start layering presentation and interactivity to provide a richer experience for more capable browsers


          
%section.slide
  %header
    Content Parity
  %article
    %p One Web Experience 
    %p
      %strong Give people what they want regardless of how they access the Web
    %p The same content is accessible to all devices
    %p Content has structure and semantic
    %p 
      Less-capable browser will only get the content (e.g. 
      %a(href="http://jquerymobile.com") jQueryMobile
      )
%section.slide
  %header
    Progressive Enhancement
    %span.smaller
      %a(href="http://easy-readers.net/books/adaptive-web-design/") More Info
  %article
    %p.slide 
      \... is about ensuring the content is available to and usable by anyone regardless of the location, browser, device or capabilities.
    .slide
      \... is about accessibility because of special needs:
      %ul
        %li when watching a website on a phone I'm limited by the screen resolution
        %li when browsing on a touch device I'm limited by the precision of my fingertips
    %p.slide 
      \... is about crafting experiences that serve the users by giving access to content without technical restrictions
    %p.slide
      \... is about leveraging the fault tolerance of web browsers
    %p.slide 
      \... is about applying latest technologies in an intelligent way, layer-upon-layer

%section.slide
  %header
    Layers of User Experience
  %article.small
    .row.vmargin
      .threeColumn
        %p 
          %strong Interactivity
      .twoThirds
        .autobox
          Add interactivity to the page through Javascript by listening to events and manipulating the DOM tree
          %pre
            :escaped
              $("img").click( function(e) { ... });
            
    .row.vmargin
      .threeColumn
        %p 
          %strong Audio and visual
      .twoThirds
        .autobox
          The elements of the page can be styled and enriched with CSS and inline images.
          %pre
            :escaped
              p {color: red; font-weight: bold; }
    .row.vmargin
      .threeColumn
        %p 
          %strong Semantics
      .twoThirds
        .autobox
          The various elements and attributes in a page provide an additional meaning and context to the text
          %pre
            :escaped
              <
            %strong.red><
              h1
            :escaped
              ><
            %strong.red><
              a href
            :escaped 
              \="..." 
            %strong.red><
              title
            :escaped
              \="Hello"><
            %strong.red><
              img src
            :escaped
              \="..." 
            %strong.red>< 
              alt
            :escaped
              \="A nice picture"></a></h1>
        
    .row.vmargin
      .threeColumn
        %p
          %strong Text
      .twoThirds
        .autobox
          The basic form of HTML content is text
          %pre
            :escaped
              <h1><a href="..." title="Hello"><img src="..." alt="A nice picture"></a></h1>        
        
%section.slide
  %header
    Responsive Design
  %article
    .twoColumn
      =image_tag "lesson5/responsive_design.png", :resize => true
    .twoColumn
      .autobox
        %p 
          %a(href="http://www.alistapart.com/articles/responsive-web-design/") Responsive Web Design
          by Ethan Marcotte
        %p Demonstrated how to build a responsive design for multiple screen resolutions with:
        %ul 
          %li Media Queries
          %li Fluid Grids
          %li Scalable Images
        %p 
          Some examples: 
          %a(href="http://2010.dconstruct.org") 1
          ,
          %a(href="http://lanyrd.com/") 2
          , and
          %a(href="http://www.mediaqueri.es") 3
        
%section.slide
  %header Device Screen Width
  %article
    .row
      .twoThirds
        =image_tag "lesson5/atlas_screen_width.png", :url => "https://deviceatlas.com/device-data/explorer#properties/19/20"
      .threeColumn
        .autobox
          %p 240px (26%)
          %p 128px (19%)
          %p 176px (12%)
          %p 480px (10%)

%section.slide
  %header Device Screen Height
  %article
  .row
    .twoThirds
      =image_tag "lesson5/atlas_screen_height_2.png", :url => "https://deviceatlas.com/device-data/explorer#properties/19/21"
    .threeColumn
      .autobox
        %p 320px (21%)
        %p 160px (14%)
        %p 220px (11%)
        %p 800px (7%)

%section.slide
  %header Device Screen Width over Time
  %article
  .row
    .twoThirds
      =image_tag "lesson5/atlas_screen_width_year_2.png"
    .threeColumn
      .autobox
        %p 
          %strong.red 2012
          \:  
          128, 
          144,
          176,
          220,
          %strong 240,
          %strong 320,
          360,
          430,
          %strong 480,
          540,
          600,
          640,
          %strong 720,
          768,
          780,
          %strong 800,
          976,
          1024,
          1080,
          1280,
          1366,
          1920,
          2560  

%section.slide
  %header Nokia 113 (the smallest)
  %article
    .twoColumn
      =image_tag "lesson5/nokia-113.jpg", :url => "http://www.gsmarena.com/nokia_113-4758.php"
    .twoColumn
      .autobox
        %p.slide
          128 x 160 pixels
        %p.slide
          1.8 inches display (114 ppi)
        %p.slide
          33€
        %p.slide
          Does it have a browser ? 
        %p.slide
          Yes, it does.
%section.slide
  %header Samsung Google Nexus 10 (the biggest)
  %article
    .twoColumn
      =image_tag "lesson5/google-nexus-10.png", :url => "http://www.gsmarena.com/samsung_google_nexus_10-5084.php"
    .twoColumn
      .autobox
        %p.slide
          2560 x 1600 pixels
        %p.slide
          10.1 inches display (299 ppi)
        %p.slide
          999,90€
        %p.slide
          Does it have a browser ? 
        %p.slide
          Yes, it does.



%section.slide
  %header Screen Resolution Market Share
  %article
    =image_tag "lesson5/screen-resolution-2.png", :url => "http://netmarketshare.com/report.aspx?qprid=17"

%section.slide
  %header Mobile OS Market Share (based on browser)
  %article
    =image_tag "lesson5/os_marketshare_2.png", :url => "http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8&qpcustomd=1"

%section.slide
  %header Popular screen resolutions for mobile 
  %article
    %ul 
      %li 
        %strong 480 x 320 
        \: old iPhones, mid-range Android and Nokia devices
      %li
        %strong 320 x 240
        \: low-end Android and older Nokia Symbian phones
      %li
        %strong 800 x 480
        \: new Nokia and Android devices
      %li 
        %strong 960 x 640
        \: iPhone 4 
      %li 
        %strong 1136 x 640
        \: iPhone 5 
      %li 
        %strong 1024 x 768
        \: iPad and Android tablets
      %li
        %strong 1280 x 768
        \: Lumia 920


%section.slide
  %header Layouts Options
  %article.small
    %strong Fixed-width
    %ul
      %li The most common is 960px
      %li It gives an illusion of controlling the available space
      %li It gives a bad experience on narrower or wider screens
    .slide
      %strong Fluid Layouts
      %ul
        %li Dimensions are based on percentages, not fixed measurements
        %li Not enough to scale from small to wide displays. 
    .slide
      Elastic layouts
      %ul
        %li Dimensions are determined by type size (
        %span.terminal<> em
        )
        %li Good for readability (e.g. by fixing width to 55em)
        %li Suffers from the fixed-width issues
    .slide
      Hybrid layouts
      %ul
        %li A combination of the previous methods

%section.slide
  %header Sizing the fonts
  %article.small
    %p
      First place where to add 
      %em fluidity 
      to a Web design
    %ul 
      %li
        %strong pixels
        %ul 
          %li not cascading from parent to children
          %li issues with zooming, different screen sizes and pixel densities
      %li 
        %strong ems
        %ul
          %li most common method
          %li cascading
          %li 1 em = current font size ( current = context where em is used)
      %li
        %strong percentages
        %ul
          %li behaves like em
      %li
        %strong rems
        %ul
          %li behaves like ems but always refers to the root element
          %li not well supported on mobile

%section.slide
  %header 
    Font Sizing 
    %span.smaller
      =example_url_tag("responsiveFontSizing")
  
  %article
    :coderay
      #!html
      <body>
        <h1>Lorem Ipsum</h1>
        <div class='container'>
          <div>
            <h2>Chapter 1<span>Lorem ipsum</span></h2>
            <p>Lorem ipsum ...</p>
          </div>
          <div>
            <h2>Chapter 2<span class='smaller'>Aliquam erat</span></h2>
            <p>Aliquam erat ...</p>
          </div>
        </div>
      </body>

    :coderay
      #!css
      body { font-size: 16px; }
      h1 { font-size: 2em; } /* 32px */
      h2 { font-size: 1.5em; } /* 24px */
      span { font-size: 1em; }
      span.smaller { font-size: .6666em; } /* 16px / 24px */
      
%section.slide
  %header Grid layout
  %article
    Break the page in columns based on the content (text, image, video)
    %ul 
      %li Bring order, consistency and harmony to the page
      %li Make easier for the user to find content
    .slide
      How to build your own fluid grid:
      %ul 
        %li Start with a fixed layout
        %li Break the page in columns of equally fixed size
        %li Add the structure to your page
        %li Make images fluid
        %li Mix fixed and fluid widths for the columns

%section.slide
  %header 
    Fluid Layout 
    %span.smaller
      =example_url_tag("responsiveFluidLayout")

  %article
    .twoColumn
      :coderay
        #!haml
        %body
          %header
            %h1 The Greatest Book Ever
          %article
            %h2 
              Chapter 1
            %figure
              %img(src="mountain.jpg")
            ...
          %aside 
            %section
              %h2 Chapters
                ...
            %section
              %figure
                %img(src="smile.jpg")

            %section
                ...
    .twoColumn
      :coderay
        #!css
        article {
          display: table-cell;
        }

        aside { 
          display: table-cell;
          width: 300px;
        }
        
        figure img {
          width: 100%;
          max-width: 100%;
        }

%section.slide
  %header
    Popular Frameworks (many and more)
  %article
    .row
      .twoColumn
        .autobox
          %p 
            %strong Grid-frameworks
          %p
            %a(href="http://twitter.github.com/bootstrap/index.html") Bootstrap
          %p 
            %a(href="http://semantic.gs/") The Semantic Grid System
          %p 
            %a(href="http://lessframework.com/") Less Framework
          %p 
            %a(href="http://foundation.zurb.com/") Foundation 3
      .twoColumn
        .autobox
          %p 
            %strong HTML5 Boilerplates
          %p 
            %a(href="http://thatcoolguy.github.com/gridless-boilerplate/") Gridless
          %p 
            %a(href="http://stuffandnonsense.co.uk/projects/320andup/") 320 and up
          %p 
            %a(href="http://html5boilerplate.com/") HTML5 Boilerplate
    .row.centered.vmargin
      %a(href="http://lab.maltewassermann.com/viewport-resizer/") Responsive Design Testing Tool


%section.slide
  %header
    =html5_styling_tag("Media Queries")
    %span.smaller
      %a(href="http://www.w3.org/TR/css3-mediaqueries") W3C

  %article
    %p Query syntax for serving the most appropriate styles based on the device characteristics

    Enables us:
    %ul 
      %li to create device-independent websites
      %li to optimize the visitor's experience
      %li to avoid multiple sites per device (one code base)
      %li to serve the mobile optimized versions (i.e. smaller images)
    
%section.slide
  %header
    What is the Viewport ? 
  %article
    .row
      .twoColumn
        .autobox
          What is the Viewport ?
          %ul
            %li The available area for rendering a web page
            %li Not necessarily equal to the visible area on the device
            %li User can zoom and pan within the viewport
            %li 
              Default viewport width: 
              %ul
                %li 980px on iPhone
                %li 850px on Opera
                %li 800px on Android 
      .twoColumn
        =image_tag 'lesson5/mobile_layoutviewport.jpg', :resize => true

%section.slide
  %header
    Device pixel vs CSS pixel
  %article
    %p 
      %strong.red Device pixel
      \: physical pixels of the device (e.g. 1024px wide screen)
    %p
      %strong.red CSS pixel
      \: virtual pixels of the Web page (e.g. 960px or 2000px wide page)
  
    CSS pixels do not necesarilly map to physical pixels
    %ul
      %li zooming alters the ratio between physical and virtual pixels
      %li high-resolution display (e.g. Retina) 
%section.slide
  %header
    Device pixel vs CSS pixel
  %article
    .row
      .twoColumn
        =image_tag 'lesson5/viewport-zoom-2.jpg', :resize => true
      .twoColumn
        =image_tag 'lesson5/viewport-zoom.jpg', :resize => true


%section.slide
  %header
    Layout viewport vs visual viewport
  %article
    %p
      %strong.red Layout viewport
      \: refers to the large image where the page is rendered. It doesn't change in size or shape.
    %p
      %strong.red Visual viewport
      \: refers to the smaller frame that we can use to look at the bigger image. With the small frame
      we can back away, or move closer or change the orientation we use for looking at the large image.
%section.slide
  %header
    Layout viewport vs visual viewport
  %article
    .row
      .twoColumn
        =image_tag 'lesson5/mobile_layoutviewport.jpg', :resize => true
      .twoColumn
        =image_tag 'lesson5/mobile_visualviewport.jpg', :resize => true

%section.slide
  %header
    Viewport Meta Tag
  %article
    The viewport meta tag allows us to control: 
    %ul
      %li size of the layout viewport
      %li scaling
    :coderay
      #!html
      <meta name="viewport" content="width=device-width, user-scalable=0, initial-scale=1.0, maximum-scale=1.0;" />        

        
%section.slide
  %header
    Viewport Meta Tag
  %article
    .twoColumn
      .autoimage.bordered
        =image_tag('lesson2/firstapp-no-viewport.png')
    .twoColumn
      .autoimage.bordered
        =image_tag('lesson2/firstapp-viewport.png')
        


%section.slide
  %header Media Queries Syntax
  %article
    %ul
    %li 
      Embedded in a stylesheet
      :coderay
        #!css
        @media [ not | only ] type [ and ] ( expression) { rules }
      %li 
        Link external stylesheet
        :coderay
          #!html
          <link href="file.css" rel="stylesheet" media="[not|only] type [and] ( expression)">
      %li 
        Import external stylesheet
        :coderay
          #!css
          @media url('file.css') [not|only] type [and] ( expression );
    %p
      %strong type
      \: all | screen | projection | print ...

%section.slide
  %header Viewport Width and Height
  %article
    %ul
      %li
        %strong Width
        \: width of the browser viewport including the scroll bars
      %li
        %strong Height
        \: height of the browser viewport including the scroll bars
    :coderay
      #!css
      @media type and {width: value} { rules }
      @media type and {min-width: value} { rules }
      @media type and {max-width: value} { rules }

%section.slide
  %header 
    Viewport Media Query Example 
    %span.smaller
      =example_url_tag("cssMediaQueriesViewport")
  %article
  :coderay
    #!css
    .container {
      width: 500px;
      }
    .container div {
      float: left; 
      margin: 0 15px 0 0;
      width: 235px;
    }
    @media all and (min-width: 500px) {
      h1 {
        background: white url('background.jpg') no-repeat;
        color: black;
        height: 250px;
        padding: 20px;
        font-size: 36px;
        margin: 0px;
      }
    }

%section.slide
  %header Device Width and Height
  %article
    .row
      .twoColumn
        .autobox
          %ul
            %li
              %strong Width
              \: width of the device screen (shorter side on iOS)
            %li
              %strong Height
              \: height of the device screen (longer side on iOS)
          :coderay
            #!css
            @media media and {device-width: value} 
              { rules }
            @media media and {min-device-width: value} 
              { rules }
            @media media and {max-device-width: value} 
              { rules }
      .twoColumn
        =image_tag "lesson5/mobile_mediaqueries.jpg", :resize => true
      
%section.slide
  %header 
    Device Media Query Example 
    %span.smaller
      =example_url_tag("cssMediaQueriesDevice")
  %article
  :coderay
    #!css
    .container {
      width: 500px;
      }
    .container div {
      float: left; 
      margin: 0 15px 0 0;
      width: 235px;
    }
    @media all and (max-device-width: 320px) {
      .container {
        width: auto;
      }
      .container div {
        float: none;
        margin: 0;
        width: auto;
      }
    }
    
%section.slide
  %header Device Orientation
  %article
    %ul
      %li
        %strong Orientation
        %ul
          %li 
            %span.terminal landscape
            (viewport width > viewport height )
          %li
            %span.terminal portrait
            (viewport height >= viewport width )
          
    :coderay
      #!css
      @media media and {orientation: value} { rules }

%section.slide
  %header 
    Orientation Media Query Example 
    %span.smaller
      =example_url_tag("cssMediaQueriesOrientation")
  %article
  :coderay
    #!css
    li { 
      float: left;
      border: thin solid black;
      list-style-type: none;
      padding: 10px 20px;
      text-align: center;
      max-width: 100px;
    }
    @media all and (orientation: portrait) {
      li { float: none; }
    }


  
%section.slide
  %header Device Pixel Ratio
  %article 
    %p Devices with high pixel density (> 300dpi)
    %p Provide high-def web images
    .vmargin
      %strong device-pixel-ratio
      \: device pixels per CSS pixel.
    :coderay
      #!css
      @media media and {device-pixel-ratio: value} 
        { rules }
      @media media and {min-device-pixel-ratio: value} 
        { rules }
      @media media and {max-device-pixel-ratio: value} 
        { rules }
    
    :coderay
      #!html
      <link rel="stylesheet" media="screen and min-device-pixel-ratio: 2" href="highres.css">

%section.slide
  %header Avoid hiding elements if possible
  %article
    :coderay
      #!css
      .container {
        background: white url('background.jpg') no-repeat;        
      }
      @media all and {max-device-width: 400px} {
        .container {
          display: none;
        }
    %p Assets are downloaded even if hidden. 
    %p This approach is consuming bandwidth and cache.

%section.slide
  %header Best practices
  %article
    %strong Mobile up
    %ul
      %li Build the mobile experience first
      %li Use media queries to enrich and adjust the layout for larger screens
      %li With this approach browser that don't support media queries will get the basic stylesheet
    :coderay
      #!html
      <link href="basic.css" rel="stylesheet" media="screen">
      <link href="desktop.css" rel="stylesheet" media="screen and (min-device-width: 480px)">
    %br
    .slide
      Same concept applies for high definition graphics. 
      :coderay
        #!css
        E { background-image: url('background-lowres.png'); }

        @media all and (min-device-pixel-ratio: 1.5) {
          background-image: url('background-highres.png');   
          background-size: 100% 100%; /* Ensure the images are not displayed bigger than their element */
        }
      
%section.slide
  %header Breakpoints
  %article.small
    :coderay
      #!css
      /* Smartphones (portrait and landscape) */
      @media screen and (min-device-width : 320px) and (max-device-width : 480px) { ...  }
      
      /* Smartphones (landscape) */
      @media screen and (min-width : 321px) { ... }
      
      /* Smartphones (portrait)  */
      @media screen and (max-width : 320px) { ... }
      
      /* iPads (portrait and landscape) */
      @media screen and (min-device-width : 768px) and (max-device-width : 1024px) { ... }
      
      /* iPads (landscape)  */
      @media screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) { ... }
      
      /* iPads (portrait)  */
      @media screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) { ... }
      
      /* Desktops and laptops */
      @media screen and (min-width : 1224px) { ... }
      
      /* Large screens  */
      @media screen and (min-width : 1824px) { ... }
      
      /* iPhone 4 */ 
      @media screen and (-webkit-min-device-pixel-ratio : 1.5), screen and (min-device-pixel-ratio : 1.5) { ... }


%section.slide
  %header
    Hiding/showing images
    %span.smaller
      =example_url_tag("responsiveMatchMedia")
  %article
    .row
      .twoColumn
        :coderay
          #!haml
          %ul.albums(data-role="listview")
            %li
              %img(src="cover1.jpg")
              Nirvana
            %li
              %img(src="cover2.jpg")
              The Beatles
            %li
              %img(src="cover3.jpg")
              Madonna
            %li
              %img(src="cover4.jpg")
              Lady Gaga
      .twoColumn
        :coderay
          #!haml
              %ul.albums(data-role="listview")
                %li(data-img = "cover1.jpg")
                  Nirvana
                %li(data-img = "cover2.jpg")
                  The Beatles
                %li(data-img = "cover3.jpg")
                  Madonna
              %li(data-img = "cover4.jpg")
    .row.centered.vmargin
      %p Large images can impact the loading performance
      
%section.slide
  %header 
    matchMedia
    %span.smaller
      %a(href="http://dev.w3.org/csswg/cssom-view/#the-mediaquerylist-interface") W3C
  %article
    %p 
      %strong.red matchMedia 
      %span allows us to execute a CSS media query from Javascript and receive information if the query is a match or not
    :coderay
      #!javascript
      $(function() {
        if(window.matchMedia(" (min-width: 50em) ").matches) {
          $("[data-img]").each(function(i,val) {
            var img = new Image();
            img.src = $(val).data('img');
            $(val).prepend(img);
          })
          $('.albums').listview('refresh');
        }
      });
%section.slide
  %header
    Responsive Images
    %span.smaller
      %a(href="http://picture.responsiveimages.org/") W3C Proposal
  %article
    %p A method for specifying multiple sources for an image through the CSS media queries
    
    %p Not yet supported in browsers. 
    :coderay
      #!html
      <picture width="500" height="500">
        <source media="(min-width: 45em)"
        			 srcset="large-1.jpg 1x, large-2.jpg 2x">
        <source media="(min-width: 18em)" 
        			 srcset="med-1.jpg 1x, med-2.jpg 2x">
        <source srcset="small-1.jpg 1x, small-2.jpg 2x">
        <img src="fallback.jpg" >
      </picture>
    
%section.slide
  %header
    Limitations of responsive design 
  %article
    Responsive design excels on the visual layout but it doesn't do well:
    %ul 
      %li Content adaptation
      %li Performance optimizations (e.g. images)
      %li Optimizing heavy JS code
      %li Targeting low-end devices (the majority)
      %li Reducing latency
      %li Reducing loading time

%section.slide
  %header
    Optimization
  %article
    %ul
      %li 
        Look at the user agent string, interpret it via a device detection repository (e.g. 
        %a(href="http://wurfl.sourceforge.net/") WURFL
        \) and 
        decide what to serve to that particular client (server-side)
      %li.slide 
        Test on the client-side what features are available (e.g. with 
        %a(href="http://modernizr.com/") Modernizr
        \) and 
        %ul 
          %li take some actions on the client-side based on that information
          %li inform the server that will take care of serving the right content
%section.slide
  %header
    User Agent String
  %article
    .slide
      :coderay
        #!plain

        GET / HTTP/1.1
        Host: example.com
        Connection: keep-alive
        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11
    %br
    .slide
      :coderay
        #!plain
        User-Agent: Mozilla/5.0 (iPhone Simulator; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3        

    .slide
      :coderay
        #!plain
        User-Agent: Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13

    .slide
      :coderay
        #!plain
        User-Agent: Opera/9.80 (Linux armv7l; U; en) Presto/2.9.201 Version/11.50

    .slide
      :coderay
        #!plain
        Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3

%section.slide
  %header The headache with the iPad mini
  %article.small
    .threeColumn
      .autobox.vmargin
        =image_tag "lesson5/ipadmini2.png", :resize => true  
        .centered.vmargin
          %p
            %strong 
              Everything on the iPad mini looks 
              %span.red 20% 
              smaller and there is no client or server side detection possible.
    .twoThirds
      .autobox
        %strong iPad2
        %ul 
          %li 
            Display: 768 x 1024, 
            %strong 9.7" 
            \(
            %strong 132ppi
            \)
          %li Viewport: 768 x 1024
          %li Device pixel ratio: 1
          %li 
            .tiny
              :coderay
                #!plain
                Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3
        %strong iPad mini
        %ul
          %li 
            Display: 768 x 1024, 
            %strong 7.9" 
            \(
            %strong 162ppi
            \)
          %li Viewport: 768 x 1024
          %li Device pixel ratio: 1
          %li 
            .tiny
              :coderay
                #!plain
                Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A406 Safari/8536.25

%section.slide
  %header 
    Position: fixed
    %span.smaller
      =example_url_tag("cssPositionFixed")
      
  %article
    .row
      .twoColumn
        .autobox
          %p Block the position of an element
          %p Used for creating headers and footers
          %p Supported on iOS 5 and Android >2.2
          :coderay
            #!css
              #fixed {
                top: 0;
                left: 0;
                width: 100%;
                position: fixed;
                background-color: yellow;
                text-align: center;
              }
          :coderay
            #!html
              <h1>Lorem Ipsum</h1>

              <div id="fixed">Example of fixed element</div>

              ...
      .twoColumn
        =image_tag "lesson5/positionfixed.png", :resize => true


%section.slide
  %header 
    Overflow scroll
    %span.smaller
      =example_url_tag("cssOverflowScroll")

  %article
    .row
      .twoColumn
        .autobox
          .small
            %p 
              %span.terminal
                Overflow: scroll
              defines how a box should be displayed with overflowing content
            %p 
              %span.terminal
                \-webkit-overflow-scrolling: touch 
              enables native scrolling of an elemnent
            %p 
              Supported on iOS 5 (Check also 
              %a(href="http://cubiq.org/iscroll-4") iScroll
              )
          :coderay
            #!css
            .scroll {
              height: 150px;
              overflow-y: scroll;
              -webkit-overflow-scrolling: touch;
              border-top: 1px solid black;
            }
          :coderay
            #!html
            <div class='scroll'>
              <h2>Chapter 1</h2>
              <p>Lorem ipsum dolor...
            </div>
            ...  
      .twoColumn
        =image_tag "lesson5/overflowscroll.png", :resize => true

.background(data-background = "bg-lesson5-dali-touch")

%section.slide
  %header
    Interaction Design
  %article
    =image_tag "lesson5/coffeepot_for_masochists.jpg", :resize => true

%section.slide
  %header
    Interaction Design
  %article
    .small
      %blockquote Interaction design is about shaping digital things for people’s use
    %br
    %ul
      %li It's about digital products or services
      %li It's about satisfying people's needs 
      %li It's about shaping a unique interaction technique
      %li it's about providing an enjoyable user experience
      

%section.slide
  %header
    Interaction Modes - Mouse 
  %article
    =image_tag "lesson5/mouse.jpg", :resize => true

%section.slide
  %header
    Interaction Modes - Keyboard
  %article
    =image_tag "lesson5/keyboard.jpg", :resize => true

%section.slide
  %header
    Interaction Modes - Touch
  %article
    =image_tag "lesson5/touch.jpg", :resize => true

%section.slide
  %header
    Mouse events 
  %article
    .row
      .twoColumn
        =image_tag "lesson5/mouse.jpg", :resize => true
      .twoColumn
        %ul
          %li mousedown
          %li mousemove
          %li mouseup
          %li mouseover
          %li mouseout

%section.slide
  %header
    Keyboard events
  %article
    .row
      .twoColumn
        =image_tag "lesson5/keyboard.jpg", :resize => true
      .twoColumn
        %ul
          %li keydown
          %li keypress
          %li keyup

%section.slide
  %header
    Touch events
  %article
    .row
      .twoColumn
        =image_tag "lesson5/touch.jpg", :resize => true
      .twoColumn
        %ul
          %li touchstart
          %li touchmove
          %li touchend

%section.slide
  %header
    Touch Events
    %span.smaller
      %a(href="http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html") W3C
  %article
    Touch events:
    %ul
      %li
        %strong.red touchstart
        \: a finger is placed on a DOM element
      %li
        %strong.red touchmove
        \: a finger is moved around over a DOM element
      %li
        %strong.red touchend
        \: a finger is removed from a DOM element


%section.slide
  %header
    Touches Lists
  %article
    %p Each touch event contains three lists of touches data:
    %ul
      %li 
        %strong.red touches
        \: a list of fingers that are currently on the screen
      %li
        %strong.red targetTouches
        \: a list of fingers on the current DOM element
      %li
        %strong.red changedTouches
        \: a list of fingers that are involved in the current event
    :coderay
      #!javascript
      $(document).bind('touchmove',function(e){
          e.preventDefault();
          var touch = e.originalEvent.changedTouches[0];
          console.log(touch.pageX);
      }
%section.slide
  %header
    Touch Interface
  %article
    %ul
      %li
        %strong.red identifier
        \: a unique identifier of the finger in the touch session
      %li
        %strong.red clientX, clientY
        \: coordinates of point relative to the viewport, excluding scroll offset
      %li
        %strong.red pageX, pageY
        \: coordinates of point relative to the viewport, including scroll offset
      %li
        %strong.red screenX, screenY  
        \: coordinates of point relative to the screen
      %li
        %strong.red target
        \: the DOM element that was the target of the touch (even if the finger has moved out from the element)
%section.slide
  %header 
    Example of Multi-touch App
    %span.smaller
      =example_url_tag("canvasTouch")
  %article
    :coderay
      #!javascript
      //At first touch initialize a new entry in the fingers list
      $("#canvas").bind('touchstart', function(e) {
        $.each(e.originalEvent.changedTouches, function(index, v) {
          fingers[v.identifier] = {oldX: v.pageX, oldY: v.pageY, x: v.pageX, y: v.pageY};
          fingers[v.identifier].color = colors[Math.floor(Math.random() * colors.length)];
        });
      });
      //Track the location of the fingers
      $("#canvas").bind('touchmove', function(e) {
        e.preventDefault();
        $.each(e.originalEvent.changedTouches, function(index, value) {
          fingers[value.identifier].x = value.pageX;
          fingers[value.identifier].y = value.pageY;
        });
      });
      //Remove the finger from the list
      $("#canvas").bind('touchend', function(e) {
        $.each(e.originalEvent.changedTouches, function(index, value) {
          delete fingers[value.identifier];
        });
      });  
        
%section.slide
  %header 
    Example of Multi-touch App
    %span.smaller
      =example_url_tag("canvasTouch")
  %article
    :coderay
      #!javascript
      //Draw on the canvas every 15ms (about 60fps).
      var timer = setInterval(function() {
        $.each(fingers, function(index, value) {
          if (value.oldX != value.x || value.oldY != value.y ) {
            ctx.beginPath();
            ctx.moveTo(value.oldX, value.oldY);
            ctx.lineWidth = 1;
            ctx.strokeStyle = value.color;
            ctx.lineTo(value.x,value.y);
            ctx.closePath();
            ctx.stroke();
            value.oldX = value.x;
            value.oldY = value.y;
          }
        });
      }, 15);

%section.slide
  %header Interaction Modes
  %article
    %p 3 interaction modes
    %p 3 set of events 
    %br
    %p What's the best way to handle them ? 
    %ul
      %li Sometimes we can group under the same approach
      %li Sometimes we must handle then independently

%section.slide
  %header 
    Events sequence
    %span.smaller
      =example_url_tag("touchEvents")
  %article
    %p What happens when you touch the screen of a touch device ?
    .row
      .threeColumn
        .autobox
          %strong Click
          %ul
            %li touchstart
            %li (mouseout)
            %li mouseover
            %li mousemove (once)
            %li mousedown
            %li mouseup
            %li click
            %li touchend
      .threeColumn
        .autobox
          %strong Double tap
          %ul
            %li touchstart
            %li touchend
            %li touchstart
            %li touchend
      .threeColumn
        .autobox
          %strong Move finger
          %ul
            %li touchstart
            %li touchmove
            %li touchmove
            %li ...
            %li touchmove
            %li touchend

%section.slide
  %header 
    Support both mouse and touch events
    %span.smaller
      =example_url_tag("touchDrag")
  %article
    :coderay
      #!javascript
      var square = $('.square');

      square.on('touchstart', function(e){
        setOffset(e);
        square.on('touchmove', drag);
      });
      
      square.on('touchend', function(e) { 
        square.off('touchmove');
      });
      
      square.on('mousedown', function(e) {
        setOffset(e);
        square.on('mousemove', drag);
      });

      square.on('mouseup', function(e) { 
        square.off('mousemove'); 
      });
      
%section.slide
  %header 
    Disable mouse events when touch is detected
    %span.smaller
      =example_url_tag("touchDrag")
  %article
    :coderay
      #!javascript
      square.on('touchstart', function(e){
        setOffset(e);
        square.on('touchmove', drag);
        square.off('mousedown');
      });

%section.slide
  %header
    Event equivalencies
  %article
    %table.large
      %thead
        %tr
          %th Mouse
          %th Keyboard
          %th Touch
      %tbody
        %tr
          %td mousedown
          %td keydown
          %td touchstart
        %tr
          %td mousemove
          %td keydown/press
          %td touchmove
        %tr
          %td mouseup
          %td keyup
          %td touchend
        
%section.slide
  %header Tricky Parts
  %article
    %p Multi touch is only available for touch devices
    %p Some devices may fire multiple types of events simultaneously
    %p Browsers on touch devices also generate click events because websites depend on them
    %p No hover events for touch devices
    %p Multiple interaction modes must be well designed and tested 

%section.slide
  %header
    Multiple interaction modes
  %article
    =image_tag "lesson5/nokia-e71.jpeg", :resize => true

%section.slide
  %header
    Multiple interaction modes
  %article
    =image_tag "lesson5/ipad-keyboard.jpg", :resize => true

%section.slide
  %header
    Click event
  %article
    %p Click is not just a mouse event 
    %p Click is synthesized by the browser
    %p It means "Activate" the element
    %p Works well in most of the situations
    %p It doesn't give the best UX on touch devices
    %br
    %p => About 300ms delay between the touchend and the click event
    

%section.slide
  %header Some hits for touch events
  %article
    Disable zooming
    :coderay
      #!haml
      %meta(name="viewport" content="width=device-width, user-scalable=0, initial-scale=1.0, maximum-scale=1.0;")
    Prevent scrolling
    :coderay
      #!javascript
      $("#canvas").bind('touchmove', function(e) {
        e.preventDefault();
        ...
      });
    %p 
      Asynchronously handle touch information (timer or animation frame)
    %p 
      jQuery Mobile provide 
      %a(href="http://jquerymobile.com/test/docs/api/events.html") virtual click, tap and swipe events

.background(data-background = "bg-lesson5-escher")

%section.slide
  %header
    =html5_styling_tag("Cascading Style Sheets Level 3")      
    %span.smaller
      %a(href="http://www.w3.org/Style/CSS/current-work") W3C
  %article
    %p CSS is the default styling language for every markup-based document
    %p The version of CSS in current use is CSS2.1
    %p CSS3 consists of several modules that are worked out and implemented independently
    %p CSS3 is under active development 
    %p 
      What's available in the browsers ? 
      %a(href="http://caniuse.com/#cats=CSS") Can I Use

%section.slide
  %header
    =html5_styling_tag("The horror of the CSS3 prefixes")      
  %article
  
    %p Browsers specific prefixes for the CSS properties are used for implementing experimental properties
    %p 
      Prefixes allow browsers to modify the "experimental" properties 
      (
      %a(href="http://www.alistapart.com/articles/prefix-or-posthack/") read more
      )
    :coderay
      #!css
      E { 
        -moz-transform: function(value); /* Firefox */
        -ms-transform: function(value);  /* IE */
        -o-transform: function(value);  /* Opera */ 
        -webkit-transform: function(value); /*Webkit*/
        transform: function(value); 
      }
    %br
    %p 
      One workaround: 
      %a(href="http://sass-lang.com/") mixins with SASS 
%section.slide
  %header CSS Selectors
  %article
    A CSS selector consist of
    %ul
      %li 
        A 
        %strong.red pattern 
        that is matched against all elements in the document tree
      %li
        A
        %strong.red rule
        that is applied to the elements that match

    Two main categories of selectors: 
    %ul
      %li 
        %strong DOM selectors
        \: class, id, type, attribute selectors  
      %li  
        %strong Pseudo-selectors
        \: first letter of a paragraph
    Versions
    %ul
      %li CSS1 introduced the first 5-6 selectors
      %li CSS2 introduced 12 more selectors
      %li CSS3 is adding a dozen more selectors

%section.slide
  %header
    CSS2 DOM Selectors 
    %span.smaller
      %a(href="http://www.w3.org/TR/CSS2/selector.html#pattern-matching") W3C
  %article
    %table
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td Universal
          %td *
          %td Match any element
        %tr
          %td Type
          %td E
          %td Match any E element
        %tr
          %td Class
          %td .title
          %td Match any element whose class attribute contains title
        %tr
          %td ID
          %td #header
          %td Match any element with an id equal to header
        %tr
          %td Descendant
          %td E F
          %td Match any F that is a descendant of E
        %tr
          %td Child
          %td E > F
          %td Match any F that is a child of E
        %tr
          %td Adjacent
          %td E + F
          %td Match any F that has is immediately preceded by a sibling E

%section.slide
  %header
    CSS2 DOM Selectors - Example
  %article
    :coderay
      #!css
      
      .title { font-weight: bold; }
      
      #header { position: fixed; }
      
      #header .title { color: #f00; }
      
      p.important { color: #f00; }
       
%section.slide
  %header
    CSS2 DOM Selectors 
    %span.smaller
      %a(href="http://www.w3.org/TR/CSS2/selector.html#pattern-matching") W3C
  %article
    %table(border = 1)
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td Attribute
          %td E[attr]
          %td Match any E that has attribute attr
        %tr
          %td Exact Attribute
          %td E[attr='val']
          %td Match any E that has attribute attr to be equal to val
        %tr
          %td Partial Attribute
          %td E[attr~='val']
          %td Match any E where val is one of the value in the list of space-separated values of attr
        %tr
          %td Lanuage Attribute
          %td E[attr|='val']
          %td Match any E where attr is a hyped-separated list of values that beging with val
          
%section.slide
  %header
    CSS2 DOM Selectors - Example
  %article
    :coderay
      #!html
      <ul>
        <li><a href="" lang="en-GB" data-options="internal">Internal</a></li>
        <li><a href="" lang="es-ES" data-options="internal hybrid">Hybrid</a></li>
        <li><a href="" lang="es-MX" data-options="external">External</a></li>
      </ul>
    :coderay
      #!css
      
      /* Color red all anchors with the data-options attribute */
      a[data-options] { color: #f00; }
          
      /* Color red all anchors where data-options equals internal */
      a[data-options='internal'] { color: #f00; }
      
      /* Color red all anchros where data-options contains internal */
      a[data-options~='internal'] { color: #f00; }

      /* Color red all anchors where lang stars with es */
      a[lang|='es'] { color: #f00; }
      
%section.slide
  %header
    =html5_styling_tag("CSS3 DOM Selectors ")      
    %span.smaller
      %a(href="http://www.w3.org/TR/2009/PR-css3-selectors-20091215") W3C
  %article
    %table
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td Beginning
          %td E[attr^='val']
          %td Match any E whose attr attribute starts with val
        %tr
          %td Ending
          %td E[attr$='val']
          %td Match any E whose attr attribute ends with val
        %tr
          %td Arbitrary
          %td E[attr*='val']
          %td Match any E whose attr attribute contains the substring val
        %tr
          %td Multiple
          %td E[attr^='val1'][attr*='val2']
          %td Match any E where attr starts with val1 and contains the substring val2

%section.slide
  %header
    =html5_styling_tag("CSS3 DOM Selectors ")      
    %span.smaller
      =example_url_tag("cssSelectors")

  %article
    :coderay
      #!css

      a[href^='mailto'] {
        background: url('data:image/png;base64,...') no-repeat left center;
        padding-left: 20px;
      }

      a[href^='http'] {
        background: url('data:image/png;base64,...') no-repeat left center;
        padding-left: 20px;
      }

      a[href$='.pdf'] {
        background: url('data:image/png;base64,...') no-repeat left center;
        padding-left: 20px;
      }

      a[href$='.doc'] {
        background: url('data:image/png;base64,...') no-repeat left center;
        padding-left: 20px;
      }

      a[href*='.rss'] {
        background: url('data:image/gif;base64,...') no-repeat left center;
        padding-left: 20px;
      }

%section.slide
  %header
    =html5_styling_tag("CSS3 Sibling Combinator")      
    %span.smaller
      %a(href="http://www.w3.org/TR/CSS2/selector.html#pattern-matching") W3C
  %article
    %table
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td Descendant
          %td E F
          %td Match any F that is a descendant of E
        %tr
          %td Child
          %td E > F
          %td Match any F that is a child of E
        %tr
          %td Adjacent
          %td E + F
          %td Match any F that is immediately preceded by a sibling E
        %tr
          %td 
            %strong General
          %td 
            %strong E ~ F
          %td 
            %strong Match any F that is preceded by a sibling E regardless of whether it is immediately adjacent

:css
  p.text1 + p.text2 { font-weight: bold; }
  p.text1 ~ p.text2 {font-style: italic; }
  
%section.slide
  %header
    =html5_styling_tag("CSS3 Sibling Combinator - Example")         
  %article
    .row  
      .twoColumn
        .autobox
          HTML
          :coderay
            #!haml
            %p.text2 This text is not affected by the rules
            %p.text1 This text has no style
            %p.text2 This text is affected by both rules
            %div 
              %p This text is on a different level
            %p.text2 This text is affected by the second rule
      .twoColumn
        .autobox
          CSS
          :coderay
            #!haml
            p.text1 + p.text2 { font-weight: bold; }
            p.text1 ~ p.text2 {font-style: italic; }
                  
    .vmargin.singlespace    
      %p.text2 This text is not affected by the rules
      %p.text1 This text has no style
      %p.text2 This text is affected by both rules
      %div 
        %p This text is on a different level
      %p.text2 This text is affected by the second rule
    


%section.slide
  %header
    CSS2 Pseudo-selectors 
    %span.smaller
      %a(href="http://www.w3.org/TR/CSS2/selector.html#pattern-matching") W3C
  %article
    %table
      %p 
        Pseudo-selectors match elements based on information that is not available in the document tree but comes from the state 
        of the elements or their relative position
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td First Child
          %td E:first-child
          %td Match E where E is the first child of its parent
        %tr
          %td Link
          %td 
            %div E:link 
            %div E:visited
          %td Match anchor E that is not visited or already visited
        %tr
          %td Dynamic 
          %td 
            %div E:active 
            %div E:hover 
            %div E:focus
          %td Match E during certain user actions
        %tr
          %td Language 
          %td E:lang(fr) 
          %td Match all E that are in language 'fr'

%section.slide
  %header
    =html5_styling_tag("CSS3 Pseudo-selectors")         
     
    %span.smaller
      %a(href="http://www.w3.org/TR/CSS2/selector.html#pattern-matching") W3C
  %article
    %table.smaller
      %thead
        %tr
          %th Selector
          %th Pattern
          %th Description
      %tbody
        %tr
          %td First/Last Child
          %td 
            %div E:first-child
            %div E:last-child
          %td Match E where E is the first/last child of its parent
        %tr
          %td nth Child
          %td 
            %div E:nth-child(n)
            %div E:nth-last-child(n)
          %td Match E that is the nth child or nth child counting from the last of its parent
        %tr
          %td Only Child
          %td E:only-child
          %td Match E that that has no siblings
        %tr
          %td First/Last Sibling
          %td 
            %div E:first-of-type
            %div E:last-of-type
          %td Match E where E is the first/last child of its parent
        %tr
          %td nth Sibling
          %td 
            %div E:nth-of-type(n)
            %div E:nth-last-of-type(n)
          %td Match E that is the nth sibling or nth sibling counting from the last
        %tr
          %td Only Sibling
          %td E:only-of-type
          %td Match E that that has no siblings of the same type of E
        %tr
          %td First line
          %td E:first-line
          %td Match the content of the first line of text of element E
        %tr
          %td First letter
          %td E:first-line
          %td Match the first letter of text of element E             

%section.slide
  %header
    =html5_styling_tag("CSS3 Pseudo-selectors")
    %span.smaller
      =example_url_tag("cssSelectors")
  %article
    :coderay
      #!css
        /* Enlarge first line of paragraph text*/
        p:first-line {font-size: 1.5em;}

        /* Enlarge first letter of the paragraph */
        p:first-letter {
          font-size:250%;
          font-weight:bold;
        }

        /* Enlarge first letter of the paragraph */
        p:nth-child(2n+1) {
          font-style: italic;
        }

        /* Indent the first line of paragraph except the first one*/
        p + p { text-indent: 1.5em; }

%section.slide
  %header
    =html5_styling_tag("CSS3 2D Transformations")
  %article
    %p Transformation property:
    .row
      .twoColumn
        :coderay
          #!css
          E { transform: function(value); }
      .twoColumn
        :coderay
          #!css
          E { 
            -moz-transform: function(value); /* Firefox */
            -ms-transform: function(value);  /* IE */
            -o-transform: function(value);  /* Opera */ 
            -webkit-transform: function(value); /*Webkit*/
            transform: function(value); 
          }
    functions: 
    %ul 
      %li rotate( angle )
      %li translate( translateX, translateY)
      %li skew( skewX, skewY )
      %li scale( scaleX, scaleY )


:css
  .deck-container .transform-rotate {
    -webkit-transform: rotate(-45deg);
    -o-transform: rotate(-45deg);
    -ie-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    transform: rotate(-45deg);
    background-color: red;
    color: white;
    padding: 10px 20px 10px 20px;
  }
  .deck-container .transform-skew {
    -webkit-transform: skew(-20deg, 10deg);
    -o-transform: skew(-20deg, 10deg);
    -ie-transform: skew(-20deg, 10deg);
    -moz-transform: skew(-20deg, 10deg);
    transform: skew(-20deg, 10deg);
    background-color: red;
    color: white;
    padding: 10px 20px 10px 20px;
  }

  .deck-container .transform-scale {
    -webkit-transform: scale(2, 0.5);
    -o-transform: scale(2, 0.5);
    -ie-transform: scale(2, 0.5)
    -moz-transform: scale(2, 0.5);
    transform: scale(2, 0.5);
    background-color: red;
    color: white;
    padding: 10px 20px 10px 20px;
  }


%section.slide
  %header
    =html5_styling_tag("CSS3 2D Transformations")
  %article
    .transform-rotate
      :coderay
        #!css
        transform: rotate(-45deg);
    %br
    %br
    %br
    %br
    .transform-skew
      :coderay
        #!css
        transform: skew(-20deg, 10deg);
    
    %br
    .transform-scale
      :coderay
        #!css
        transform: scale(2,0.5);

:css
  .transform-rotate-origin-up {
    -webkit-transform: rotate(-20deg);
    -o-transform: rotate(-45deg);
    -ie-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    transform: rotate(-45deg);
    -webkit-transform-origin: left bottom;
    -o-transform-origin: left bottom;
    -ie-transform-origin: left bottom;
    -moz-transform-origin: left bottom;
    transform-origin: left bottom;
    color: red;
    display: inline-block;
  }
  .transform-rotate-origin-down {
    -webkit-transform: rotate(20deg);
    -o-transform: rotate(-45deg);
    -ie-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    transform: rotate(-45deg);
    -webkit-transform-origin: right bottom;
    -o-transform-origin: right bottom;
    -ie-transform-origin: left bottom;
    -moz-transform-origin: left bottom;
    transform-origin: left bottom;
    color: red;
    display: inline-block;
  }
          
%section.slide
  %header
    =html5_styling_tag("CSS3 2D Transformations")
  %article
    %p Elements retain their position in the flow but they are rendered according to the transformations
    %p You can change the default origin of the transformation (default is the center)
    :coderay
      #!css
      E { 
        transform: rotate(45deg);
        transform-origin: left top;
      }
    %br
    %br  
    This text will will soon 
    .transform-rotate-origin-up 
      rotate up
    .transform-rotate-origin-down 
      and  down

:css
  .deck-container .transition-color {
    background-color: black;
    -webkit-transition: background-color 4s;
  }
  .deck-container .transition-color:hover {
    background-color: silver;
  }
  
%section.slide
  %header
    =html5_styling_tag("CSS3 Transitions")
  %article
    %p Create a smooth transition between two states of an element
    %p A transition is trigger when a new value is set for a CSS property
    
    :coderay
      #!css
      .mytext {
        background-color: black;
        transition: background-color 4s;
      }
      .mytext:hover {
        background-color: silver;
      }
    %br
    %br
    .transition-color
      Move over this text and the color will change
      
%section.slide
  %header
    =html5_styling_tag("CSS3 Transitions")
  %article
    :coderay
      #!css
        E { 
          transition-property: keyword; 
          transition-duration: time;
          transition-timing-function: keyword;
          transition-delay: time;
        }
    %ul  
      %li 
        %strong transition-property
        \: all | none | CSS property
      %li 
        %strong transition-duration
        \: time in ms | s
      %li 
        %strong transition-timing-function
        \: ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(...)
      %li 
        %strong transition-delay
        \: time in ms | s

:css
  .deck-container .transition-move {
    background-color: green;
    font-size: 100%;
    color: white;
    padding-left: 10px;
    -webkit-transition: background-color 4s, padding-left 4s, font-size 4s;
  }
  .deck-container .transition-move:hover {
    background-color: red;
    font-size: 200%;
    padding-left: 400px;
  }

%section.slide
  %header
    =html5_styling_tag("CSS3 Multiple Transitions")
  %article
    %p Create a smooth transition between two states of an element
    %p A transition is trigger when a new value is set for a CSS property

    :coderay
      #!css
      .mytext {
        background-color: green;
        font-size: 100%;
        color: white;
        padding-left: 10px;
        transition: background-color 4s, padding-left 4s, font-size 4s;
      }
      .mytext:hover {
        background-color: red;
        font-size: 200%;
        padding-left: 400px;
      }
    %br
    .transition-move
      Animate me!
:css
  @-webkit-keyframes 'expand' {
    from { border-color: black; }
    50% { border-width: 10px; }
    100% { 
      border-color: silver; 
      width: 150px;
      background-color: green;
      -webkit-transform: rotate(90deg);
      }
  }
  .deck-container .animation-expand {
    display: block;
    border: 4px solid black;
    background-color: red;
    height: 100px;
    width: 100px;
    -webkit-animation: expand 6s ease 0 infinite alternate;
  }
  
  
%section.slide
  %header
    =html5_styling_tag("CSS3 Animations")
  %article
    .row
      .twoColumn
        :coderay
          #!css
          @keyframes 'expand' {
            from { border-color: black; }
            50% { border-width: 10px; }
            100% { 
              border-color: silver; 
              width: 150px;
              background-color: green;
              transform: rotate(90deg);
              }
          }
      .twoColumn
        :coderay
          #!css
          .square {
            display: block;
            border: 4px solid black;
            background-color: red;
            height: 100px;
            width: 100px;
            -webkit-animation: expand 6s ease 0 infinite alternate;
          }
    %br
    %br
    .animation-expand
%section.slide
  %header
    =html5_styling_tag("CSS3 Animations")
  %article
    :coderay
      #!css
        @keyframes 'name' {
          keyframe {
            property: value
          }
        }
    %ul  
      %li 
        %strong name
        \: name of the animation
      %li 
        %strong keyframe
        \: from | to | 0% | 100% | x%

%section.slide
  %header
    =html5_styling_tag("CSS3 Animations")
  %article
    :coderay
      #!css
        E { 
          animation-name: name;
          animation-duration: time;
          animation-timing-function: keyword;
          animation-delay: time;
          animation-iteration-count: count;
          animation-direction: keyword;
        }
    %ul  
      %li 
        %strong animation-name
        \: name of the keyframe
      %li 
        %strong transition-duration
        \: time in ms | s
      %li 
        %strong transition-timing-function
        \: ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(...)
      %li 
        %strong transition-delay
        \: time in ms | s    
      %li 
        %strong transition-count
        \: 0, 1, ... | infinite   
      %li 
        %strong transition-direction
        \: normal | alternate