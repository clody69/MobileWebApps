=example_header_tag "Simple Blog with jQuery, validation and editing", "htmljQueryValEditBlog"

%p
  This example is an extenstion of the 
  =example_url_tag("htmljQueryValBlog")
  where we add the in place editing capabilities to the title and content. 
%p
  HTML providers the 
  %span.terminal
    contenteditable
  attribute that turns any tag into an editable element by the user. Now supported on iOS 5 and Android Browser 3.0, it allows in place editing on mobile pages.
  
%p
  In the example, we add the
  %span.terminal
    contenteditable
  attribute to the title and content fields of the blog main page
  
.code_block
  .code_header
    views/index.haml  
  :coderay_raw
    #!haml
    %ul(data-role = "listview")
      - $articles.each_with_index do |a, i|
        %li
          %p.ui-li-aside
            =a[:timestamp]
          %h3(contenteditable="true" data-name="title" data-id='#{i}') 
            =a[:title]
          %p
            %strong
              =a[:email]
          %p(contenteditable="true" data-name="content" data-id='#{i}')
            =a[:content]

%p
  On the client we add the functionality for detecting when the content is changed by the user and we post the
  updates to the server.
  

.code_block
  .code_header
    JS
  :coderay_raw
    #!javascript
    $("[contenteditable]").focus(function() {
      var $this = $(this);
      $this.data('before', $this.html());
      return $this;          
    });
    $("[contenteditable]").live('blur', function() {
        var $this = $(this);
        if ($this.data('before') !== $this.html()) {
            $this.data('before', $this.html());
            $this.trigger('change');
            //alert($this.attr('data-id'));
            var msg = {};
            msg['id'] = $this.attr('data-id');
            msg[$this.attr('data-name')] = $this.html();
            $.post('/update', msg);
        }
        return $this;
    });       

%p
  On the server side we add the method for updating the entry 
  
.code_block
  .code_header
    server.rb
  :coderay_raw
    #!ruby
    post '/update' do
      #Symbolize the params keys
      article = params.inject({}) { |h,(k,v)| h[k.to_sym] = v; h }
    
      #Update the timestamp
      article[:timestamp] = timestamp
      
      #Replace the entry in the list of articles
      $articles[article[:id].to_i].merge!(article)
    
      puts $articles
    end
    

%p
  You can try this example by starting the server and visiting the page
  %a(href="http://localhost:4567") http://localhost:4567
  in your browser
.code_block
  .code_header
    terminal  
  :coderay_raw
    #!haml
    ruby server.rb